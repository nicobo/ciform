var bs=28;var bx2=1<<bs,bm=bx2-1,bx=bx2>>1,bd=bs>>1,bdm=(1<<bd)-1;var log2=Math.log(2);function badd(B,A){var D=B.length,G=A.length;if(D<G){return badd(A,B)}var C=new Array(D);var F=0,E=0;for(;E<G;E++){F+=B[E]+A[E];C[E]=F&bm;F>>>=bs}for(;E<D;E++){F+=B[E];C[E]=F&bm;F>>>=bs}if(F){C[E]=F}return C}function bsub(B,A){var D=B.length,G=A.length;if(G>D){return[]}if(G==D){if(A[G-1]>B[G-1]){return[]}if(G==1){return[B[0]-A[0]]}}var C=new Array(D);var F=0;for(var E=0;E<G;E++){F+=B[E]-A[E];C[E]=F&bm;F>>=bs}for(;E<D;E++){F+=B[E];C[E]=F&bm;F>>=bs}if(F){return[]}if(C[E-1]){return C}while(E>1&&C[E-1]==0){E--}return C.slice(0,E)}function zeros(B){var A=new Array(B);while(B-->0){A[B]=0}return A}function bmul(O,N){N=N.concat([0]);var J=O.length,C=N.length;var D,P,B,M,E,I,L,H,G,K,F;var A=zeros(J+C+1);for(D=0;D<J;D++){B=O[D];if(B){M=0;G=B>>bd;H=B&bdm;E=D;for(P=0;P<C;P++,E++){I=N[P];L=I>>bd;I=I&bdm;K=I*G+H*L;F=K>>bd;K&=bdm;M+=A[E]+H*I+(K<<bd);A[E]=M&bm;M=(M>>bs)+L*G+F}}}D=A.length;if(A[D-1]){return A}while(D>1&&A[D-1]==0){D--}return A.slice(0,D)}function toppart(B,D,A){var C=0;while(D>=0&&A-->0){C=C*bx2+B[D--]}return C}function bdiv(F,E){var K=F.length-1,H=E.length-1,G=K-H;if(K<H||K==H&&(F[K]<E[K]||K>0&&F[K]==E[K]&&F[K-1]<E[K-1])){this.q=[0];this.mod=F;return this}if(K==H&&toppart(F,H,2)/toppart(E,H,2)<4){var A=0,D;for(;;){D=bsub(F,E);if(D.length==0){break}F=D;A++}this.q=[A];this.mod=F;return this}var Q,P;P=Math.floor(Math.log(E[H])/log2)+1;Q=bs-P;if(Q){F=F.concat();E=E.concat();for(O=H;O>0;O--){E[O]=((E[O]<<Q)&bm)|(E[O-1]>>P)}E[0]=(E[0]<<Q)&bm;if(F[K]&((bm<<P)&bm)){F[++K]=0;G++}for(O=K;O>0;O--){F[O]=((F[O]<<Q)&bm)|(F[O-1]>>P)}F[0]=(F[0]<<Q)&bm}var O,N,R;var J=zeros(G+1);var B=zeros(G).concat(E);for(;;){R=bsub(F,B);if(R.length==0){break}J[G]++;F=R}var M=E[H],I=toppart(E,H,2);for(O=K;O>H;O--){var L=O-H-1;if(O>=F.length){J[L]=1}else{if(F[O]==M){J[L]=bm}else{J[L]=Math.floor(toppart(F,O,2)/M)}}var C=toppart(F,O,3);while(J[L]*I>C){J[L]--}B=B.slice(1);R=bsub(F,bmul([J[L]],B));if(R.length==0){J[L]--;R=bsub(F,bmul([J[L]],B))}F=R}if(Q){for(O=0;O<F.length-1;O++){F[O]=(F[O]>>Q)|((F[O+1]<<P)&bm)}F[F.length-1]>>=Q}K=J.length;while(K>1&&J[K-1]==0){K--}this.q=J.slice(0,K);K=F.length;while(K>1&&F[K-1]==0){K--}this.mod=F.slice(0,K);return this}function simplemod(C,A){var E=0,B;for(var D=C.length-1;D>=0;D--){B=C[D];E=((B>>bd)+(E<<bd))%A;E=((B&bdm)+(E<<bd))%A}return E}function bmod(C,A){if(A.length==1){if(C.length==1){return[C[0]%A[0]]}if(A[0]<bdm){return[simplemod(C,A[0])]}}var B=new bdiv(C,A);return B.mod}function bmod2(I,E,L){var H=I.length-(E.length<<1);if(H>0){return bmod2(I.slice(0,H).concat(bmod2(I.slice(H),E,L)),E,L)}var K=E.length+1,J=E.length-1,F;var G=bmul(I.slice(J),L).slice(K);var D=I.slice(0,K);var B=bmul(G,E).slice(0,K);var A=bsub(D,B);if(A.length==0){D[K]=1;A=bsub(D,B)}for(var C=0;;C++){F=bsub(A,E);if(F.length==0){break}A=F;if(C>=3){return bmod2(A,E,L)}}return A}function bmodexp(A,F,D){var B=[1],E,G,H=A.concat();var C=D.length*2;var I=new Array(C+1);I[C--]=1;for(;C>=0;C--){I[C]=0}I=new bdiv(I,D).q;for(C=0;C<F.length;C++){for(G=1,E=0;E<bs;E++,G<<=1){if(F[C]&G){B=bmod2(bmul(B,H),D,I)}H=bmod2(bmul(H,H),D,I)}}return B}function RSAencrypt(B,C,A){return bmodexp(B,C,A)}function RSAdecrypt(A,H,G,F,B){var E=bmodexp(bmod(A,G),bmod(H,bsub(G,[1])),G);var D=bmodexp(bmod(A,F),bmod(H,bsub(F,[1])),F);var C=bsub(D,E);if(C.length==0){C=bsub(E,D);C=bmod(bmul(C,B),F);C=bsub(F,C)}else{C=bmod(bmul(C,B),F)}return badd(bmul(C,G),E)}function mpi2b(J){var B=1,A=[0],E=0,H=256;var G,D=J.length;if(D<2){alert("string too short, not a MPI");return 0}var F=(D-2)*8;var I=J.charCodeAt(0)*256+J.charCodeAt(1);if(I>F||I<F-8){alert("not a MPI, bits="+I+",len="+F);return 0}for(var C=0;C<F;C++){if((H<<=1)>255){H=1;G=J.charCodeAt(--D)}if(B>bm){B=1;A[++E]=0}if(G&H){A[E]|=B}B<<=1}return A}function b2mpi(H){var C=1,G=0,A=[0],B=1,F=0;var I=H.length*bs;var D,E="";for(D=0;D<I;D++){if(H[G]&C){A[F]|=B}if((B<<=1)>255){B=1;A[++F]=0}if((C<<=1)>bm){C=1;G++}}while(F&&A[F]==0){F--}C=256;for(I=8;I>0;I--){if(A[F]&(C>>=1)){break}}I+=F*8;E+=String.fromCharCode(I/256)+String.fromCharCode(I%256);if(I){for(D=F;D>=0;D--){E+=String.fromCharCode(A[D])}}return E};