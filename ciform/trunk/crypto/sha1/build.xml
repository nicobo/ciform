<!--
   Build script for the project "Crypto.SHA1".

   This script is an Ant script using Ivy extension to resolve dependencies.
   You will need both Ant (http://ant.apache.org/) and Ivy (http://ant.apache.org/ivy) to use it.
-->
<project name="crypto.sha1" default="package" xmlns:ivy="antlib:org.apache.ivy.ant">

    <!-- ==================== -->
    <!-- Settings -->
    <!-- ==================== -->

    <!-- default properties, specific to this project -->
    <property file="local.properties"/>
    <property file="build.properties"/>
    <!-- properties common to all projects -->
    <property file="../../local.properties"/>
    <property file="../../common.properties"/>


    <!-- ==================== -->
    <!-- Main targets : they are greatly inspired from the Maven build lifecycle -->
    <!-- ==================== -->

    <target name="validate" description="Validates the project is correct and all necessary information is available.">
        <!-- Retreives dependencies with ivy -->
        <ivy:retrieve/>
        <!-- Creates necessary directories -->
        <mkdir dir="${target.dir}" />
    </target>
    
    <target name="compile" depends="validate" description="Compiles the source code of the project.">
        <!-- nothing to do -->
    </target>
    
    <!--
        Firefox 3 users : change the security.fileuri.strict_origin_policy parameter to 'false' for the following target to work
    -->
    <target name="test" depends="compile" description="Tests the compiled source code using a suitable unit testing framework. These tests should not require the code be packaged or deployed.">
        <!-- 0. First create a temp. dir inside the preferred temp. dir (yes...) -->
        <tempfile property="tests.tmp" destDir="${tmp.dir}"/>
        <mkdir dir="${tests.tmp}"/>
        <!-- 1. ... and copy all required files inside -->
        <copy file="${jsunit.core}" todir="${tests.tmp}"/>
        <copy file="${src.dir}/sha1.js" todir="${tests.tmp}"/>
        <copy file="${tests.dir}/AllTests.html" todir="${tests.tmp}"/>
        <!-- 2. Then call the JsUnit target against our unit tests -->
        <ant antfile="${jsunit.build}"
             dir="${jsunit.dir}"
             target="standalone_test">
            <!-- Look at http://jsunit.net and JsUnit's build.xml source for a definition of the following properties -->
            <property name="browserFileNames" value="${jsunit.browsers}"/> 
            <property name="logsDirectory" value="${build.dir}"/>   <!-- those logs will be used by CruiseControl -->
            <property name="port" value="45678"/>                   <!-- a port that's not likely to conflict with an existing daemon -->
            <property name="url" value="${jsunit.testrunner}?testPage=${tests.tmp}/AllTests.html"/>
            <!--property name="resourceBase" value="${tests.tmp}"/-->
        </ant>
        <!-- 3. Finally remove the temp. dir / files -->
        <delete dir="${tests.tmp}"/>
    </target>
    
    <target name="package" depends="test, doc, compile, build-compressed" description="Takes the compiled code and package it in its distributable format, such as a JAR.">
        <!-- A. Simply copies the library to the target dir (nothing more to do for the standard library) -->
        <copy file="${src.dir}/sha1.js" tofile="${lib.dir}/sha1-${ivy.revision}.js" />
        <!-- B. Creates the compressed version of the library -->
        <java jar="${yuicompressor.jar}" fork="true" output="${lib.dir}/sha1-compressed-${ivy.revision}.js" failonerror="true">
            <arg line="--type js" />
            <arg file="${src.dir}/sha1.js"/>
        </java>
    </target>
    
    <target name="integration-test" depends="package" description="Processes and deploys the package if necessary into an environment where integration tests can be run.">
        <!-- nothing to do -->
    </target>
    
    <target name="verify" depends="integration-test" description="Runs any checks to verify the package is valid and meets quality criteria.">
        <!-- nothing to do -->
    </target>
    
    <target name="install" depends="verify" description="Installs the package into the local repository, for use as a dependency in other projects locally.">
        <ivy:publish resolver="local" artifactspattern="${lib.dir}/[artifact]-[revision].[ext]" overwrite="true" />
    </target>
    
    <target name="deploy" depends="verify" description="Done in an integration or release environment, copies the final package to the remote repository for sharing with other developers and projects.">
        <!-- nothing to do -->
    </target>
    

    <!-- ==================== -->
    <!-- Some more specific targets -->
    <!-- ==================== -->

    <target name="doc" depends="validate" description="Generates developer documentation.">
        <!-- Generates a report of dependencies -->
        <ivy:report todir="${doc.dir}"/>
        <!-- Generates the API doc -->
        <exec command="${jsdoc}" failonerror="true">
            <arg value="-d"/> <arg value="${doc.dir}"/>
            <arg value="--no-lexical-privates"/>
            <arg value="--package-naming"/>
            <arg value="--nested-file-naming"/>
            <arg line="--project-name Crypto.SHA1"/>
            <arg value="${src.dir}"/>
        </exec>
    </target>

    <target name="build-default" depends="validate" description="Builds the default package.">
        <copy file="${src.dir}/sha1.js" tofile="${lib.dir}/sha1-${ivy.revision}.js" />
    </target>

    <target name="build-compressed" depends="validate" description="Builds the compressed version of the package.">
    </target>

    <target name="clean" description="Cleans this project.">
        <delete includeemptydirs="true" dir="${target.dir}"/>
        <delete includeemptydirs="true" dir="${build.dir}"/>
    </target>
    
    
    <!-- ==================== -->
    <!-- CruiseControl targets -->
    <!-- ==================== -->
    
    <target name="cruisecontrol-build" depends="verify">
    </target>
    

</project>
